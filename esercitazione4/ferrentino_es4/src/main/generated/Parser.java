
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.generated;

import java_cup.runtime.*;
import java.util.ArrayList;
import main.syntaxtree.wrapper.*;
import main.syntaxtree.node.*;
import main.syntaxtree.node.expr.*;
import main.syntaxtree.node.expr.binaryexpr.*;
import main.syntaxtree.node.expr.unaryexpr.*;
import main.syntaxtree.node.expr.cons.*;
import main.syntaxtree.node.stat.*;
import main.type.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\007\005\000\002\007\007" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\012\000\002\013\006\000\002\013\005\000\002\015" +
    "\002\000\002\015\003\000\002\016\003\000\002\016\005" +
    "\000\002\017\004\000\002\017\005\000\002\020\003\000" +
    "\002\020\003\000\002\021\002\000\002\021\004\000\002" +
    "\022\003\000\002\022\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\003\000\002\023\004\000\002\023\005\000" +
    "\002\023\004\000\002\024\007\000\002\014\002\000\002" +
    "\014\004\000\002\025\006\000\002\026\012\000\002\027" +
    "\005\000\002\027\004\000\002\030\003\000\002\030\005" +
    "\000\002\031\006\000\002\031\006\000\002\032\005\000" +
    "\002\033\006\000\002\033\005\000\002\034\003\000\002" +
    "\034\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\004\000\002\035\004\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\022\004\ufffd\005\013\006\005\007\015\010" +
    "\012\011\007\012\017\014\016\001\002\000\004\063\243" +
    "\001\002\000\006\040\ufff9\063\ufff9\001\002\000\004\002" +
    "\242\001\002\000\006\040\ufff8\063\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\005\013\006\005\007\015\010\012\011" +
    "\007\012\017\014\016\001\002\000\024\002\ufffd\004\ufffd" +
    "\005\013\006\005\007\015\010\012\011\007\012\017\014" +
    "\016\001\002\000\006\040\ufff6\063\ufff6\001\002\000\004" +
    "\063\221\001\002\000\004\004\215\001\002\000\006\040" +
    "\ufff7\063\ufff7\001\002\000\004\063\020\001\002\000\006" +
    "\040\ufff5\063\ufff5\001\002\000\004\036\021\001\002\000" +
    "\020\006\005\007\015\010\012\011\007\012\017\015\026" +
    "\037\uffe5\001\002\000\004\063\030\001\002\000\004\037" +
    "\036\001\002\000\006\035\uffe3\037\uffe3\001\002\000\006" +
    "\035\034\037\uffe4\001\002\000\014\006\005\007\015\010" +
    "\012\011\007\012\017\001\002\000\004\063\030\001\002" +
    "\000\010\034\uffc9\035\uffc9\037\uffc9\001\002\000\010\034" +
    "\032\035\uffe0\037\uffe0\001\002\000\004\063\033\001\002" +
    "\000\014\034\uffc8\035\uffc8\037\uffc8\043\uffc8\046\uffc8\001" +
    "\002\000\016\006\005\007\015\010\012\011\007\012\017" +
    "\015\026\001\002\000\006\035\uffe2\037\uffe2\001\002\000" +
    "\004\042\037\001\002\000\016\006\005\007\015\010\012" +
    "\011\007\012\017\013\042\001\002\000\004\040\043\001" +
    "\002\000\004\040\uffdf\001\002\000\004\040\uffde\001\002" +
    "\000\034\005\013\006\005\007\015\010\012\011\007\012" +
    "\017\016\uffdd\017\uffdd\022\uffdd\025\uffdd\036\uffdd\041\uffdd" +
    "\063\uffdd\001\002\000\024\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\001\002" +
    "\000\020\016\051\017\055\022\050\025\067\036\053\041" +
    "\060\063\062\001\002\000\034\005\013\006\005\007\015" +
    "\010\012\011\007\012\017\016\uffdd\017\uffdd\022\uffdd\025" +
    "\uffdd\036\uffdd\041\uffdd\063\uffdd\001\002\000\020\016\uffdc" +
    "\017\uffdc\022\uffdc\025\uffdc\036\uffdc\041\uffdc\063\uffdc\001" +
    "\002\000\026\026\075\027\100\032\105\036\076\050\071" +
    "\063\103\064\102\065\072\066\074\067\104\001\002\000" +
    "\004\063\202\001\002\000\020\016\uffd4\017\uffd4\022\uffd4" +
    "\025\uffd4\036\uffd4\041\uffd4\063\uffd4\001\002\000\026\026" +
    "\075\027\100\032\105\036\076\050\071\063\103\064\102" +
    "\065\072\066\074\067\104\001\002\000\020\016\uffd9\017" +
    "\uffd9\022\uffd9\025\uffd9\036\uffd9\041\uffd9\063\uffd9\001\002" +
    "\000\026\026\075\027\100\032\105\036\076\050\071\063" +
    "\103\064\102\065\072\066\074\067\104\001\002\000\004" +
    "\033\167\001\002\000\004\041\166\001\002\000\044\002" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\025" +
    "\uffe6\036\uffe6\041\uffe6\063\uffe6\001\002\000\004\033\165" +
    "\001\002\000\012\034\uffc9\036\143\043\uffc9\046\uffc9\001" +
    "\002\000\010\034\032\043\161\046\162\001\002\000\004" +
    "\033\160\001\002\000\020\016\051\017\055\022\050\025" +
    "\067\036\053\041\uffdb\063\062\001\002\000\004\033\156" +
    "\001\002\000\030\026\075\027\100\032\105\033\077\036" +
    "\076\050\071\063\103\064\102\065\072\066\074\067\104" +
    "\001\002\000\020\016\uffd8\017\uffd8\022\uffd8\025\uffd8\036" +
    "\uffd8\041\uffd8\063\uffd8\001\002\000\026\026\075\027\100" +
    "\032\105\036\076\050\071\063\103\064\102\065\072\066" +
    "\074\067\104\001\002\000\050\020\uffbd\024\uffbd\030\uffbd" +
    "\031\uffbd\033\uffbd\034\uffbd\037\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\001\002\000\040\030\110\031" +
    "\124\033\154\047\113\050\107\051\120\052\117\053\111" +
    "\054\122\055\114\056\121\057\123\060\115\061\116\062" +
    "\112\001\002\000\050\020\uffbc\024\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\037\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\050\020\uffc0\024\uffc0\030" +
    "\uffc0\031\uffc0\033\uffc0\034\uffc0\037\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000\026\026\075" +
    "\027\100\032\105\036\076\050\071\063\103\064\102\065" +
    "\072\066\074\067\104\001\002\000\020\016\uffd1\017\uffd1" +
    "\022\uffd1\025\uffd1\036\uffd1\041\uffd1\063\uffd1\001\002\000" +
    "\050\020\uffbf\024\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\037\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\001\002\000\050\020\uffb9\024\uffb9\030\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\037\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\001\002\000\050\020\uffbe\024\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\037\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\001\002\000\052\020\uffba\024" +
    "\uffba\030\uffba\031\uffba\033\uffba\034\uffba\036\143\037\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001\002" +
    "\000\050\020\uffbb\024\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\037\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\001\002\000\026\026\075\027\100\032\105\036\076" +
    "\050\071\063\103\064\102\065\072\066\074\067\104\001" +
    "\002\000\050\020\uffa9\024\uffa9\030\uffa9\031\uffa9\033\uffa9" +
    "\034\uffa9\037\uffa9\047\113\050\107\051\120\052\117\053" +
    "\111\054\122\055\114\056\121\057\123\060\115\061\116" +
    "\062\112\001\002\000\026\026\075\027\100\032\105\036" +
    "\076\050\071\063\103\064\102\065\072\066\074\067\104" +
    "\001\002\000\026\026\075\027\100\032\105\036\076\050" +
    "\071\063\103\064\102\065\072\066\074\067\104\001\002" +
    "\000\026\026\075\027\100\032\105\036\076\050\071\063" +
    "\103\064\102\065\072\066\074\067\104\001\002\000\026" +
    "\026\075\027\100\032\105\036\076\050\071\063\103\064" +
    "\102\065\072\066\074\067\104\001\002\000\026\026\075" +
    "\027\100\032\105\036\076\050\071\063\103\064\102\065" +
    "\072\066\074\067\104\001\002\000\026\026\075\027\100" +
    "\032\105\036\076\050\071\063\103\064\102\065\072\066" +
    "\074\067\104\001\002\000\026\026\075\027\100\032\105" +
    "\036\076\050\071\063\103\064\102\065\072\066\074\067" +
    "\104\001\002\000\026\026\075\027\100\032\105\036\076" +
    "\050\071\063\103\064\102\065\072\066\074\067\104\001" +
    "\002\000\026\026\075\027\100\032\105\036\076\050\071" +
    "\063\103\064\102\065\072\066\074\067\104\001\002\000" +
    "\026\026\075\027\100\032\105\036\076\050\071\063\103" +
    "\064\102\065\072\066\074\067\104\001\002\000\026\026" +
    "\075\027\100\032\105\036\076\050\071\063\103\064\102" +
    "\065\072\066\074\067\104\001\002\000\026\026\075\027" +
    "\100\032\105\036\076\050\071\063\103\064\102\065\072" +
    "\066\074\067\104\001\002\000\026\026\075\027\100\032" +
    "\105\036\076\050\071\063\103\064\102\065\072\066\074" +
    "\067\104\001\002\000\026\026\075\027\100\032\105\036" +
    "\076\050\071\063\103\064\102\065\072\066\074\067\104" +
    "\001\002\000\050\020\uffb1\024\uffb1\030\110\031\uffb1\033" +
    "\uffb1\034\uffb1\037\uffb1\047\113\050\107\051\120\052\117" +
    "\053\111\054\122\055\114\056\121\057\123\060\115\061" +
    "\116\062\112\001\002\000\050\020\uffae\024\uffae\030\uffae" +
    "\031\uffae\033\uffae\034\uffae\037\uffae\047\113\050\107\051" +
    "\120\052\117\053\111\054\122\055\114\056\121\057\uffae" +
    "\060\115\061\116\062\112\001\002\000\050\020\uffb2\024" +
    "\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\037\uffb2\047\uffb2" +
    "\050\uffb2\051\120\052\117\053\111\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000\050" +
    "\020\uffab\024\uffab\030\uffab\031\uffab\033\uffab\034\uffab\037" +
    "\uffab\047\113\050\107\051\120\052\117\053\111\054\122" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\001" +
    "\002\000\050\020\uffb6\024\uffb6\030\uffb6\031\uffb6\033\uffb6" +
    "\034\uffb6\037\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\111\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\001\002\000\050\020\uffb5\024\uffb5\030\uffb5\031" +
    "\uffb5\033\uffb5\034\uffb5\037\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\111\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\001\002\000\050\020\uffb0\024\uffb0" +
    "\030\uffb0\031\uffb0\033\uffb0\034\uffb0\037\uffb0\047\113\050" +
    "\107\051\120\052\117\053\111\054\122\055\114\056\121" +
    "\057\uffb0\060\uffb0\061\uffb0\062\112\001\002\000\050\020" +
    "\uffad\024\uffad\030\uffad\031\uffad\033\uffad\034\uffad\037\uffad" +
    "\047\113\050\107\051\120\052\117\053\111\054\122\055" +
    "\114\056\121\057\uffad\060\uffad\061\116\062\112\001\002" +
    "\000\050\020\uffac\024\uffac\030\uffac\031\uffac\033\uffac\034" +
    "\uffac\037\uffac\047\113\050\107\051\120\052\117\053\111" +
    "\054\122\055\uffac\056\121\057\uffac\060\uffac\061\uffac\062" +
    "\uffac\001\002\000\050\020\uffb8\024\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\037\uffb8\047\uffb8\050\uffb8\051\120\052" +
    "\117\053\111\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\001\002\000\050\020\uffaf\024\uffaf\030" +
    "\uffaf\031\uffaf\033\uffaf\034\uffaf\037\uffaf\047\113\050\107" +
    "\051\120\052\117\053\111\054\122\055\114\056\121\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\001\002\000\050\020\uffb3" +
    "\024\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\037\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\111\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000" +
    "\050\020\uffb4\024\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\037\uffb4\047\113\050\107\051\120\052\117\053\111\054" +
    "\122\055\114\056\121\057\123\060\115\061\116\062\112" +
    "\001\002\000\050\020\uffb7\024\uffb7\030\uffb7\031\uffb7\033" +
    "\uffb7\034\uffb7\037\uffb7\047\uffb7\050\uffb7\051\120\052\117" +
    "\053\111\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\001\002\000\030\026\075\027\100\032\105" +
    "\036\076\037\146\050\071\063\103\064\102\065\072\066" +
    "\074\067\104\001\002\000\044\030\110\031\124\033\uffc2" +
    "\034\150\037\uffc2\047\113\050\107\051\120\052\117\053" +
    "\111\054\122\055\114\056\121\057\123\060\115\061\116" +
    "\062\112\001\002\000\004\037\147\001\002\000\050\020" +
    "\uffc3\024\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\037\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002" +
    "\000\050\020\uffc4\024\uffc4\030\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\037\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\001\002\000\026\026\075\027\100\032\105\036\076" +
    "\050\071\063\103\064\102\065\072\066\074\067\104\001" +
    "\002\000\006\033\uffc1\037\uffc1\001\002\000\040\030\110" +
    "\031\124\037\153\047\113\050\107\051\120\052\117\053" +
    "\111\054\122\055\114\056\121\057\123\060\115\061\116" +
    "\062\112\001\002\000\050\020\uffa8\024\uffa8\030\uffa8\031" +
    "\uffa8\033\uffa8\034\uffa8\037\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\001\002\000\020\016\uffd2\017\uffd2" +
    "\022\uffd2\025\uffd2\036\uffd2\041\uffd2\063\uffd2\001\002\000" +
    "\050\020\uffaa\024\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\037\uffaa\047\uffaa\050\uffaa\051\120\052\117\053\111\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\001\002\000\020\016\uffd7\017\uffd7\022\uffd7\025\uffd7\036" +
    "\uffd7\041\uffd7\063\uffd7\001\002\000\004\041\uffda\001\002" +
    "\000\020\016\uffd6\017\uffd6\022\uffd6\025\uffd6\036\uffd6\041" +
    "\uffd6\063\uffd6\001\002\000\006\033\uffca\066\164\001\002" +
    "\000\026\026\075\027\100\032\105\036\076\050\071\063" +
    "\103\064\102\065\072\066\074\067\104\001\002\000\004" +
    "\033\uffc5\001\002\000\004\033\uffcb\001\002\000\020\016" +
    "\uffd3\017\uffd3\022\uffd3\025\uffd3\036\uffd3\041\uffd3\063\uffd3" +
    "\001\002\000\044\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\016\uffe7\017\uffe7" +
    "\021\uffe7\022\uffe7\025\uffe7\036\uffe7\041\uffe7\063\uffe7\001" +
    "\002\000\020\016\uffd5\017\uffd5\022\uffd5\025\uffd5\036\uffd5" +
    "\041\uffd5\063\uffd5\001\002\000\040\020\171\030\110\031" +
    "\124\047\113\050\107\051\120\052\117\053\111\054\122" +
    "\055\114\056\121\057\123\060\115\061\116\062\112\001" +
    "\002\000\004\040\043\001\002\000\022\016\uffcf\017\uffcf" +
    "\021\173\022\uffcf\025\uffcf\036\uffcf\041\uffcf\063\uffcf\001" +
    "\002\000\004\040\043\001\002\000\020\016\uffd0\017\uffd0" +
    "\022\uffd0\025\uffd0\036\uffd0\041\uffd0\063\uffd0\001\002\000" +
    "\020\016\uffce\017\uffce\022\uffce\025\uffce\036\uffce\041\uffce" +
    "\063\uffce\001\002\000\004\037\177\001\002\000\006\044" +
    "\200\045\201\001\002\000\004\033\uffc7\001\002\000\004" +
    "\033\uffc6\001\002\000\004\046\203\001\002\000\004\064" +
    "\204\001\002\000\004\023\205\001\002\000\004\064\206" +
    "\001\002\000\004\024\207\001\002\000\004\040\043\001" +
    "\002\000\020\016\uffcc\017\uffcc\022\uffcc\025\uffcc\036\uffcc" +
    "\041\uffcc\063\uffcc\001\002\000\040\024\212\030\110\031" +
    "\124\047\113\050\107\051\120\052\117\053\111\054\122" +
    "\055\114\056\121\057\123\060\115\061\116\062\112\001" +
    "\002\000\004\040\043\001\002\000\020\016\uffcd\017\uffcd" +
    "\022\uffcd\025\uffcd\036\uffcd\041\uffcd\063\uffcd\001\002\000" +
    "\010\034\032\035\uffe1\037\uffe1\001\002\000\004\014\016" +
    "\001\002\000\022\002\ufffd\005\013\006\005\007\015\010" +
    "\012\011\007\012\017\014\016\001\002\000\004\002\001" +
    "\001\002\000\022\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\014\ufffc\001\002\000\004\046\236" +
    "\001\002\000\006\033\224\034\223\001\002\000\004\063" +
    "\225\001\002\000\042\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\016\ufffa\017" +
    "\ufffa\022\ufffa\025\ufffa\036\ufffa\041\ufffa\063\ufffa\001\002" +
    "\000\004\046\226\001\002\000\016\026\231\027\232\064" +
    "\230\065\233\066\227\067\235\001\002\000\006\033\uffea" +
    "\034\uffea\001\002\000\006\033\uffee\034\uffee\001\002\000" +
    "\006\033\uffec\034\uffec\001\002\000\006\033\uffeb\034\uffeb" +
    "\001\002\000\006\033\uffed\034\uffed\001\002\000\006\033" +
    "\uffef\034\uffef\001\002\000\006\033\uffe9\034\uffe9\001\002" +
    "\000\016\026\231\027\232\064\230\065\233\066\227\067" +
    "\235\001\002\000\006\033\ufff0\034\ufff0\001\002\000\006" +
    "\002\uffff\004\uffff\001\002\000\006\002\ufffe\004\ufffe\001" +
    "\002\000\004\002\000\001\002\000\010\033\ufff4\034\ufff4" +
    "\046\252\001\002\000\006\033\246\034\245\001\002\000" +
    "\004\063\247\001\002\000\042\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\016" +
    "\ufffb\017\ufffb\022\ufffb\025\ufffb\036\ufffb\041\ufffb\063\ufffb" +
    "\001\002\000\010\033\ufff3\034\ufff3\046\250\001\002\000" +
    "\026\026\075\027\100\032\105\036\076\050\071\063\103" +
    "\064\102\065\072\066\074\067\104\001\002\000\042\030" +
    "\110\031\124\033\ufff1\034\ufff1\047\113\050\107\051\120" +
    "\052\117\053\111\054\122\055\114\056\121\057\123\060" +
    "\115\061\116\062\112\001\002\000\026\026\075\027\100" +
    "\032\105\036\076\050\071\063\103\064\102\065\072\066" +
    "\074\067\104\001\002\000\042\030\110\031\124\033\ufff2" +
    "\034\ufff2\047\113\050\107\051\120\052\117\053\111\054" +
    "\122\055\114\056\121\057\123\060\115\061\116\062\112" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\005\003\013\005\010\006\003\012" +
    "\007\001\001\000\004\010\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\240\005" +
    "\010\006\003\012\007\001\001\000\012\003\237\005\010" +
    "\006\003\012\007\001\001\000\002\001\001\000\004\007" +
    "\221\001\001\000\004\004\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\021\015\022\016\024\017\023\001\001\000\004" +
    "\030\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\026\001\001\000\004\030\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\021\017\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\040\020" +
    "\037\001\001\000\004\013\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\045\006\003\021\044\001" +
    "\001\000\002\001\001\000\026\022\056\023\064\024\053" +
    "\025\051\026\067\027\065\030\062\031\063\032\055\033" +
    "\060\001\001\000\010\005\045\006\003\021\046\001\001" +
    "\000\002\001\001\000\006\033\100\035\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\100\034\175" +
    "\035\143\001\001\000\002\001\001\000\006\033\100\035" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\156\023\064\024\053" +
    "\025\051\026\067\027\065\030\062\031\063\032\055\033" +
    "\060\001\001\000\002\001\001\000\006\033\100\035\072" +
    "\001\001\000\002\001\001\000\006\033\100\035\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\100\035\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\100\035\105\001\001\000\002\001\001\000\006\033\100" +
    "\035\141\001\001\000\006\033\100\035\140\001\001\000" +
    "\006\033\100\035\137\001\001\000\006\033\100\035\136" +
    "\001\001\000\006\033\100\035\135\001\001\000\006\033" +
    "\100\035\134\001\001\000\006\033\100\035\133\001\001" +
    "\000\006\033\100\035\132\001\001\000\006\033\100\035" +
    "\131\001\001\000\006\033\100\035\130\001\001\000\006" +
    "\033\100\035\127\001\001\000\006\033\100\035\126\001" +
    "\001\000\006\033\100\035\125\001\001\000\006\033\100" +
    "\035\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\100\034" +
    "\144\035\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\100\034" +
    "\150\035\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\100\034\162\035\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\171\001\001\000\004\014\173\001\001\000\004\013\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\217" +
    "\001\001\000\012\003\216\005\010\006\003\012\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\100\035\250\001\001\000\002\001\001" +
    "\000\006\033\100\035\252\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int declList1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declList1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList declList1 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funDeclOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funDeclOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp funDeclOp = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList declList2 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            ArrayList<FunDeclOp> funDeclOpList = declList1.getFunDeclOpList();
                                                            ArrayList<VarDeclOp> varDeclOpList = declList1.getVarDeclOpList();
                                                            funDeclOpList.add(funDeclOp);
                                                            declList1.merge(declList2);
                                                            RESULT = new ProgramOp(varDeclOpList, funDeclOpList);
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              DeclList RESULT =null;
		int varDeclOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDeclOp = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList declList = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            ArrayList<VarDeclOp> varDeclOpList = declList.getVarDeclOpList();
                                                            varDeclOpList.add(0, varDeclOp);
                                                            RESULT = declList;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              DeclList RESULT =null;
		int funDeclOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funDeclOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp funDeclOp = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList declList = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            ArrayList<FunDeclOp> funDeclOpList = declList.getFunDeclOpList();
                                                            funDeclOpList.add(0, funDeclOp);
                                                            RESULT = declList;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              DeclList RESULT =null;
		 RESULT = new DeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              FunDeclOp RESULT =null;
		int funDeclOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funDeclOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunDeclOp funDeclOp = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            funDeclOp.setMain(true);
                                                            RESULT = funDeclOp; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOp RESULT =null;
		int typeOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp typeOp = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idAndExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idAndExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IdAndExpr> idAndExprList = (ArrayList<IdAndExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp(typeOp, idAndExprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOp RESULT =null;
		int idAndExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idAndExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IdAndExpr> idAndExprList = (ArrayList<IdAndExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp(new TypeOp(Type.VAR), idAndExprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(Type.INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(Type.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(Type.REAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(Type.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(Type.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<IdAndExpr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            ArrayList<IdAndExpr> idAndExprList = new ArrayList<>();
                                                            idAndExprList.add(new IdAndExpr(new Id(id)));
                                                            RESULT = idAndExprList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdAndExpr> RESULT =null;
		int idAndExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idAndExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IdAndExpr> idAndExprList = (ArrayList<IdAndExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	                                                        idAndExprList.add(new IdAndExpr(new Id(id)));
	                                                        RESULT = idAndExprList; 
	                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdAndExpr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	                                                        ArrayList<IdAndExpr> idAndExprList = new ArrayList<>();
	                                                        idAndExprList.add(new IdAndExpr(new Id(id), expr));
	                                                        RESULT = idAndExprList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdAndExpr> RESULT =null;
		int idAndExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idAndExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<IdAndExpr> idAndExprList = (ArrayList<IdAndExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	                                                        idAndExprList.add(new IdAndExpr(new Id(id), expr));
	                                                        RESULT = idAndExprList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdAndExpr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cons cons = (Cons)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            ArrayList<IdAndExpr> idAndExprList = new ArrayList<>();
                                                            idAndExprList.add(new IdAndExpr(new Id(id), (Expr) cons));
                                                            RESULT = idAndExprList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdAndExpr> RESULT =null;
		int idAndExprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idAndExprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<IdAndExpr> idAndExprList = (ArrayList<IdAndExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cons cons = (Cons)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	                                                        idAndExprList.add(new IdAndExpr(new Id(id), (Expr) cons));
	                                                        RESULT = idAndExprList;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Cons RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Cons RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Cons RESULT =null;
		 RESULT = new TrueCons(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Cons RESULT =null;
		 RESULT = new FalseCons(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Cons RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              Cons RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<ParDeclOp> parDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp typeOp = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunDeclOp(new Id(id), parDeclList, typeOp, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp(varDeclList, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Body ::= LBRACK VarDeclList RBRACK 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp(varDeclList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= 
            {
              ArrayList<ParDeclOp> RESULT =null;
		 RESULT = new ArrayList<ParDeclOp>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDeclOp> parDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            ArrayList<ParDeclOp> parDeclOpList = new ArrayList<>();
                                                            parDeclOpList.add(0, parDecl);
                                                            RESULT = parDeclOpList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDeclOp> parDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parDeclOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp parDeclOp = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parDeclList.add(parDeclOp);
                                                            RESULT = parDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp typeOp = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOp(false, typeOp, idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp typeOp = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOp(true, typeOp, idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= Type 
            {
              TypeOp RESULT =null;
		int typeOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeOp typeOp = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = typeOp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeOrVoid ::= VOID 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(Type.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		 RESULT = new ArrayList<VarDeclOp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varDeclList.add(0, varDecl);
	                                                        RESULT = varDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            ArrayList<Stat> statList = new ArrayList<>();
                                                            statList.add(0, stat);
                                                            RESULT = statList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= Stat StatList 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	                                                        statList.add(0, stat);
	                                                        RESULT = statList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= IfStat 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfOp ifStat = (IfOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ForStat 
            {
              Stat RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForOp forStat = (ForOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = forStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadOp readStat = (ReadOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = readStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteOp writeStat = (WriteOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = writeStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignOp assignStat = (AssignOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = assignStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= WhileStat 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileOp whileStat = (WhileOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCall funCall = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallOpStat(funCall); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnOp(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              Stat RESULT =null;
		 RESULT = new ReturnOp(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfStat ::= IF Expr THEN Body Else 
            {
              IfOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body2 = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfOp(expr, body1, body2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= 
            {
              BodyOp RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileOp(expr, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int int1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int int2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int int2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String int2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            RESULT = new ForOp(new Id(id), new IntegerCons(int1),
                                                                new IntegerCons(int2), body); 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadOp(idList, new StringCons(val)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList READ 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadOp(idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            ArrayList<Id> idList = new ArrayList<>();
                                                            idList.add(new Id(val));
                                                            RESULT = idList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Id> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	                                                        idList.add(new Id(val));
	                                                        RESULT = idList;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteOp(false, exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteOp(true, exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignOp(idList, exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCall RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCall(new Id(val), exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= ID LPAR RPAR 
            {
              FunCall RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCall(new Id(val), new ArrayList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            ArrayList<Expr> exprList = new ArrayList<>();
                                                            exprList.add(0, expr);
                                                            RESULT = exprList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                            exprList.add(0, expr);
	                                                        RESULT = exprList; 
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueCons(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseCons(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharCons(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= ID 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCall funCall = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunCallOpExpr(funCall); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DiffOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MulOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PowOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StrCatOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GTOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GEOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LTOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LEOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EQOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NEOp(expr1, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UminusOp(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotOp(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParOp(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
