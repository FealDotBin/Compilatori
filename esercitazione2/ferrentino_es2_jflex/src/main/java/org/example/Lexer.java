// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: srcjflexcup/Lexer.flex

/* JFlex per la generazione del Lexer per l'esercitazione 2 */
package main.java.org.example;

import java_cup.runtime.*;
import main.java.org.example.*;import java.util.HashMap;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\2\1\1\16\0\4\2\1\1\3\2"+
    "\1\3\3\2\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\2\12\12\1\2\1\13\1\14\1\15\1\16"+
    "\2\2\4\3\1\17\25\3\4\2\1\3\1\2\1\20"+
    "\3\3\1\21\1\22\1\3\1\23\1\24\2\3\1\25"+
    "\1\3\1\26\1\27\3\3\1\30\1\31\2\3\1\32"+
    "\3\3\1\33\1\2\1\34\1\2\41\0\2\2\4\3"+
    "\4\2\1\3\2\2\1\0\7\2\1\3\4\2\1\3"+
    "\5\2\27\3\1\2\37\3\1\2\u01ca\3\4\2\14\3"+
    "\16\2\5\3\7\2\1\3\1\2\1\3\21\2\160\0"+
    "\5\3\1\2\2\3\2\2\4\3\1\2\1\3\6\2"+
    "\1\3\1\2\3\3\1\2\1\3\1\2\24\3\1\2"+
    "\123\3\1\2\213\3\1\2\5\0\2\2\246\3\1\2"+
    "\46\3\2\2\1\3\6\2\51\3\6\2\1\3\1\2"+
    "\55\0\1\2\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\1\0\10\2\33\3\4\2\4\3\15\2\6\0\5\2"+
    "\1\3\4\2\13\0\1\2\1\0\3\2\53\3\25\0"+
    "\12\12\4\2\2\3\1\0\143\3\1\2\1\3\10\0"+
    "\1\2\6\0\2\3\2\0\1\2\4\0\2\3\12\12"+
    "\3\3\2\2\1\3\17\2\1\0\1\3\1\0\36\3"+
    "\33\0\2\2\131\3\13\0\1\3\16\2\12\12\41\3"+
    "\11\0\2\3\4\2\1\3\2\2\1\0\30\3\4\0"+
    "\1\3\11\0\1\3\3\0\1\3\5\0\22\2\31\3"+
    "\3\0\4\2\13\3\65\2\25\3\1\2\22\3\13\2"+
    "\61\0\66\3\3\0\1\3\22\0\1\3\7\0\12\3"+
    "\2\0\2\2\12\12\1\2\20\3\3\0\1\2\10\3"+
    "\2\2\2\3\2\2\26\3\1\2\7\3\1\2\1\3"+
    "\3\2\4\3\2\2\1\0\1\3\7\0\2\2\2\0"+
    "\2\2\3\0\1\3\10\2\1\0\4\2\2\3\1\2"+
    "\3\3\2\0\2\2\12\12\4\3\7\2\2\3\1\2"+
    "\1\0\2\2\3\0\1\2\6\3\4\2\2\3\2\2"+
    "\26\3\1\2\7\3\1\2\2\3\1\2\2\3\1\2"+
    "\2\3\2\2\1\0\1\2\5\0\4\2\2\0\2\2"+
    "\3\0\3\2\1\0\7\2\4\3\1\2\1\3\7\2"+
    "\12\12\2\0\3\3\1\0\13\2\3\0\1\2\11\3"+
    "\1\2\3\3\1\2\26\3\1\2\7\3\1\2\2\3"+
    "\1\2\5\3\2\2\1\0\1\3\10\0\1\2\3\0"+
    "\1\2\3\0\2\2\1\3\17\2\2\3\2\0\2\2"+
    "\12\12\1\2\1\3\7\2\1\3\6\0\1\2\3\0"+
    "\1\2\10\3\2\2\2\3\2\2\26\3\1\2\7\3"+
    "\1\2\2\3\1\2\5\3\2\2\1\0\1\3\7\0"+
    "\2\2\2\0\2\2\3\0\7\2\3\0\4\2\2\3"+
    "\1\2\3\3\2\0\2\2\12\12\1\2\1\3\20\2"+
    "\1\0\1\3\1\2\6\3\3\2\3\3\1\2\4\3"+
    "\3\2\2\3\1\2\1\3\1\2\2\3\3\2\2\3"+
    "\3\2\3\3\3\2\14\3\4\2\5\0\3\2\3\0"+
    "\1\2\4\0\2\2\1\3\6\2\1\0\16\2\12\12"+
    "\11\2\1\3\6\2\5\0\10\3\1\2\3\3\1\2"+
    "\27\3\1\2\20\3\3\2\1\3\7\0\1\2\3\0"+
    "\1\2\4\0\7\2\2\0\1\2\3\3\5\2\2\3"+
    "\2\0\2\2\12\12\20\2\1\3\3\0\1\2\10\3"+
    "\1\2\3\3\1\2\27\3\1\2\12\3\1\2\5\3"+
    "\2\2\1\0\1\3\7\0\1\2\3\0\1\2\4\0"+
    "\7\2\2\0\7\2\1\3\1\2\2\3\2\0\2\2"+
    "\12\12\1\2\2\3\15\2\4\0\11\3\1\2\3\3"+
    "\1\2\51\3\2\0\1\3\7\0\1\2\3\0\1\2"+
    "\4\0\1\3\5\2\3\3\1\0\7\2\3\3\2\0"+
    "\2\2\12\12\12\2\6\3\1\2\3\0\1\2\22\3"+
    "\3\2\30\3\1\2\11\3\1\2\1\3\2\2\7\3"+
    "\3\2\1\0\4\2\6\0\1\2\1\0\1\2\10\0"+
    "\6\2\12\12\2\2\2\0\15\2\60\3\1\0\2\3"+
    "\7\0\4\2\10\3\10\0\1\2\12\12\47\2\2\3"+
    "\1\2\1\3\1\2\5\3\1\2\30\3\1\2\1\3"+
    "\1\2\12\3\1\0\2\3\11\0\1\3\2\2\5\3"+
    "\1\2\1\3\1\2\6\0\2\2\12\12\2\2\4\3"+
    "\40\2\1\3\27\2\2\0\6\2\12\12\13\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\2\0\10\3\1\2"+
    "\44\3\4\2\24\0\1\2\2\0\5\3\13\0\1\2"+
    "\44\0\11\2\1\0\71\2\53\3\24\0\1\3\12\12"+
    "\6\2\6\3\4\0\4\3\3\0\1\3\3\0\2\3"+
    "\7\0\3\3\4\0\15\3\14\0\1\3\1\0\12\12"+
    "\4\0\2\2\46\3\1\2\1\3\5\2\1\3\2\2"+
    "\53\3\1\2\115\3\1\2\4\3\2\2\7\3\1\2"+
    "\1\3\1\2\4\3\2\2\51\3\1\2\4\3\2\2"+
    "\41\3\1\2\4\3\2\2\7\3\1\2\1\3\1\2"+
    "\4\3\2\2\17\3\1\2\71\3\1\2\4\3\2\2"+
    "\103\3\2\2\3\0\40\2\20\3\20\2\126\3\2\2"+
    "\6\3\3\2\u016c\3\2\2\21\3\1\2\32\3\5\2"+
    "\113\3\3\2\13\3\7\2\15\3\1\2\4\3\3\0"+
    "\13\2\22\3\3\0\13\2\22\3\2\0\14\2\15\3"+
    "\1\2\3\3\1\2\2\0\14\2\64\3\40\0\3\2"+
    "\1\3\3\2\2\3\1\0\2\2\12\12\41\2\4\0"+
    "\1\2\12\12\6\2\131\3\7\2\5\3\2\0\42\3"+
    "\1\0\1\3\5\2\106\3\12\2\37\3\1\2\14\0"+
    "\4\2\14\0\12\2\12\12\36\3\2\2\5\3\13\2"+
    "\54\3\4\2\32\3\6\2\12\12\46\2\27\3\5\0"+
    "\4\2\65\3\12\0\1\2\35\0\2\2\1\0\12\12"+
    "\6\2\12\12\15\2\1\3\10\2\16\0\1\2\2\0"+
    "\77\2\5\0\57\3\21\0\7\3\4\2\12\12\21\2"+
    "\11\0\14\2\3\0\36\3\15\0\2\3\12\12\54\3"+
    "\16\0\14\2\44\3\24\0\10\2\12\12\3\2\3\3"+
    "\12\12\44\3\2\2\11\3\7\2\53\3\2\2\3\3"+
    "\20\2\3\0\1\2\25\0\4\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\5\2\300\3\72\0\1\2\5\0"+
    "\26\3\2\2\6\3\2\2\46\3\2\2\6\3\2\2"+
    "\10\3\1\2\1\3\1\2\1\3\1\2\1\3\1\2"+
    "\37\3\2\2\65\3\1\2\7\3\1\2\1\3\3\2"+
    "\3\3\1\2\7\3\3\2\4\3\2\2\6\3\4\2"+
    "\15\3\5\2\3\3\1\2\7\3\16\2\5\0\32\2"+
    "\5\0\20\2\2\3\23\2\1\3\13\2\5\0\1\2"+
    "\12\0\1\2\1\3\15\2\1\3\20\2\15\3\3\2"+
    "\40\3\20\2\15\0\4\2\1\0\3\2\14\0\21\2"+
    "\1\3\4\2\1\3\2\2\12\3\1\2\1\3\3\2"+
    "\5\3\6\2\1\3\1\2\1\3\1\2\1\3\1\2"+
    "\4\3\1\2\13\3\2\2\4\3\5\2\5\3\4\2"+
    "\1\3\21\2\51\3\u0177\2\57\3\1\2\57\3\1\2"+
    "\205\3\6\2\4\3\3\0\2\3\14\2\46\3\1\2"+
    "\1\3\5\2\1\3\2\2\70\3\7\2\1\3\17\2"+
    "\1\0\27\3\11\2\7\3\1\2\7\3\1\2\7\3"+
    "\1\2\7\3\1\2\7\3\1\2\7\3\1\2\7\3"+
    "\1\2\7\3\1\2\40\0\57\2\1\3\325\2\3\3"+
    "\31\2\11\3\6\0\1\2\5\3\2\2\5\3\4\2"+
    "\126\3\2\2\2\0\2\2\3\3\1\2\132\3\1\2"+
    "\4\3\5\2\53\3\1\2\136\3\21\2\40\3\60\2"+
    "\320\3\100\2\375\3\3\2\215\3\103\2\56\3\2\2"+
    "\15\3\3\2\20\3\12\12\2\3\24\2\57\3\1\0"+
    "\4\2\12\0\1\2\37\3\2\0\120\3\2\0\45\2"+
    "\11\3\2\2\147\3\2\2\65\3\2\2\11\3\52\2"+
    "\15\3\1\0\3\3\1\0\4\3\1\0\27\3\5\0"+
    "\4\2\1\0\13\2\1\3\7\2\64\3\14\2\2\0"+
    "\62\3\22\0\12\2\12\12\6\2\22\0\6\3\3\2"+
    "\1\3\1\2\2\3\1\0\12\12\34\3\10\0\2\2"+
    "\27\3\15\0\14\2\35\3\3\2\4\0\57\3\16\0"+
    "\16\2\1\3\12\12\6\2\5\3\1\0\12\3\12\12"+
    "\5\3\1\2\51\3\16\0\11\2\3\3\1\0\10\3"+
    "\2\0\2\2\12\12\6\2\27\3\3\2\1\3\3\0"+
    "\62\3\1\0\1\3\3\0\2\3\2\0\5\3\2\0"+
    "\1\3\1\0\1\3\30\2\3\3\2\2\13\3\5\0"+
    "\2\2\3\3\2\0\12\2\6\3\2\2\6\3\2\2"+
    "\6\3\11\2\7\3\1\2\7\3\1\2\53\3\1\2"+
    "\16\3\6\2\163\3\10\0\1\2\2\0\2\2\12\12"+
    "\6\2\244\3\14\2\27\3\4\2\61\3\4\2\156\3"+
    "\2\2\152\3\46\2\7\3\14\2\5\3\5\2\1\3"+
    "\1\0\12\3\1\2\15\3\1\2\5\3\1\2\1\3"+
    "\1\2\2\3\1\2\2\3\1\2\154\3\41\2\153\3"+
    "\22\2\100\3\2\2\66\3\50\2\15\3\3\2\20\0"+
    "\20\2\20\0\3\2\2\3\30\2\3\3\31\2\1\3"+
    "\6\2\5\3\1\2\207\3\2\2\1\0\4\2\1\3"+
    "\13\2\12\12\7\2\32\3\4\2\1\3\1\2\32\3"+
    "\13\2\131\3\3\2\6\3\2\2\6\3\2\2\6\3"+
    "\2\2\3\3\3\2\2\3\3\2\2\3\22\2\3\0"+
    "\4\2\14\3\1\2\32\3\1\2\23\3\1\2\2\3"+
    "\1\2\17\3\2\2\16\3\42\2\173\3\105\2\65\3"+
    "\210\2\1\0\202\2\35\3\3\2\61\3\17\2\1\0"+
    "\37\2\40\3\15\2\36\3\5\2\46\3\5\0\5\2"+
    "\36\3\2\2\44\3\4\2\10\3\1\2\5\3\52\2"+
    "\236\3\2\2\12\12\6\2\44\3\4\2\44\3\4\2"+
    "\50\3\10\2\64\3\234\2\67\3\11\2\26\3\12\2"+
    "\10\3\230\2\6\3\2\2\1\3\1\2\54\3\1\2"+
    "\2\3\3\2\1\3\2\2\27\3\12\2\27\3\11\2"+
    "\37\3\101\2\23\3\1\2\2\3\12\2\26\3\12\2"+
    "\32\3\106\2\70\3\6\2\2\3\100\2\1\3\3\0"+
    "\1\2\2\0\5\2\4\0\4\3\1\2\3\3\1\2"+
    "\35\3\2\2\3\0\4\2\1\0\40\2\35\3\3\2"+
    "\35\3\43\2\10\3\1\2\34\3\2\0\31\2\66\3"+
    "\12\2\26\3\12\2\23\3\15\2\22\3\156\2\111\3"+
    "\67\2\63\3\15\2\63\3\15\2\44\3\4\0\10\2"+
    "\12\12\u0146\2\52\3\1\2\2\0\3\2\2\3\116\2"+
    "\35\3\12\2\1\3\10\2\26\3\13\0\137\2\25\3"+
    "\33\2\27\3\11\2\3\0\65\3\17\0\37\2\12\12"+
    "\17\2\4\0\55\3\13\0\2\2\1\0\17\2\1\0"+
    "\2\2\31\3\7\2\12\12\6\2\3\0\44\3\16\0"+
    "\1\2\12\12\4\2\1\3\2\0\1\3\10\2\43\3"+
    "\1\0\2\2\1\3\11\2\3\0\60\3\16\0\4\3"+
    "\4\2\4\0\1\2\2\0\12\12\1\3\1\2\1\3"+
    "\43\2\22\3\1\2\31\3\14\0\6\2\1\0\101\2"+
    "\7\3\1\2\1\3\1\2\4\3\1\2\17\3\1\2"+
    "\12\3\7\2\57\3\14\0\5\2\12\12\6\2\4\0"+
    "\1\2\10\3\2\2\2\3\2\2\26\3\1\2\7\3"+
    "\1\2\2\3\1\2\5\3\1\2\2\0\1\3\7\0"+
    "\2\2\2\0\2\2\3\0\2\2\1\3\6\2\1\0"+
    "\5\2\5\3\2\0\2\2\7\0\3\2\5\0\213\2"+
    "\65\3\22\0\4\3\5\2\12\12\4\2\1\0\3\3"+
    "\36\2\60\3\24\0\2\3\1\2\1\3\10\2\12\12"+
    "\246\2\57\3\7\0\2\2\11\0\27\2\4\3\2\0"+
    "\42\2\60\3\21\0\3\2\1\3\13\2\12\12\46\2"+
    "\53\3\15\0\1\3\7\2\12\12\66\2\33\3\2\2"+
    "\17\0\4\2\12\12\306\2\54\3\17\0\145\2\100\3"+
    "\12\12\25\2\10\3\2\2\1\3\2\2\10\3\1\2"+
    "\2\3\1\2\30\3\6\0\1\2\2\0\2\2\4\0"+
    "\1\3\1\0\1\3\2\0\14\2\12\0\106\2\10\3"+
    "\2\2\47\3\7\0\2\2\7\0\1\3\1\2\1\3"+
    "\1\0\33\2\1\3\12\0\50\3\7\0\1\3\4\0"+
    "\10\2\1\0\10\2\1\3\13\0\56\3\20\0\3\2"+
    "\1\3\42\2\71\3\7\2\11\3\1\2\45\3\10\0"+
    "\1\2\10\0\1\3\17\2\12\12\30\2\36\3\2\2"+
    "\26\0\1\2\16\0\111\2\7\3\1\2\2\3\1\2"+
    "\46\3\6\0\3\2\1\0\1\2\2\0\1\2\7\0"+
    "\1\3\1\0\10\2\12\12\6\2\6\3\1\2\2\3"+
    "\1\2\40\3\5\0\1\2\2\0\1\2\5\0\1\3"+
    "\7\2\12\12\u0136\2\23\3\4\0\271\2\1\3\54\2"+
    "\4\3\37\2\232\3\146\2\157\3\21\2\304\3\274\2"+
    "\57\3\1\2\11\0\307\2\107\3\271\2\71\3\7\2"+
    "\37\3\1\2\12\12\146\2\36\3\2\2\5\0\13\2"+
    "\60\3\7\0\11\2\4\3\14\2\12\12\11\2\25\3"+
    "\5\2\23\3\260\2\100\3\200\2\113\3\4\2\1\0"+
    "\1\3\67\0\7\2\4\0\15\3\100\2\2\3\1\2"+
    "\1\3\1\0\13\2\2\0\16\2\370\3\10\2\326\3"+
    "\52\2\11\3\367\2\37\3\61\2\3\3\21\2\4\3"+
    "\10\2\u018c\3\4\2\153\3\5\2\15\3\3\2\11\3"+
    "\7\2\12\3\3\2\2\0\1\2\4\0\301\2\5\0"+
    "\3\2\26\0\2\2\7\0\36\2\4\0\224\2\3\0"+
    "\273\2\125\3\1\2\107\3\1\2\2\3\2\2\1\3"+
    "\2\2\2\3\2\2\4\3\1\2\14\3\1\2\1\3"+
    "\1\2\7\3\1\2\101\3\1\2\4\3\2\2\10\3"+
    "\1\2\7\3\1\2\34\3\1\2\4\3\1\2\5\3"+
    "\1\2\1\3\3\2\7\3\1\2\u0154\3\2\2\31\3"+
    "\1\2\31\3\1\2\37\3\1\2\31\3\1\2\37\3"+
    "\1\2\31\3\1\2\37\3\1\2\31\3\1\2\37\3"+
    "\1\2\31\3\1\2\10\3\2\2\62\12\67\0\4\2"+
    "\62\0\10\2\1\0\16\2\1\0\26\2\5\0\1\2"+
    "\17\0\120\2\7\0\1\2\21\0\2\2\7\0\1\2"+
    "\2\0\1\2\5\0\325\2\55\3\3\2\7\0\7\3"+
    "\2\2\12\12\4\2\1\3\u0171\2\54\3\4\0\12\12"+
    "\5\2\306\3\13\2\7\0\51\2\104\3\7\0\1\3"+
    "\4\2\12\12\u0156\2\1\3\117\2\4\3\1\2\33\3"+
    "\1\2\2\3\1\2\1\3\2\2\1\3\1\2\12\3"+
    "\1\2\4\3\1\2\1\3\1\2\1\3\6\2\1\3"+
    "\4\2\1\3\1\2\1\3\1\2\1\3\1\2\3\3"+
    "\1\2\2\3\1\2\1\3\2\2\1\3\1\2\1\3"+
    "\1\2\1\3\1\2\1\3\1\2\1\3\1\2\2\3"+
    "\1\2\1\3\2\2\4\3\1\2\7\3\1\2\4\3"+
    "\1\2\4\3\1\2\1\3\1\2\12\3\1\2\21\3"+
    "\5\2\3\3\1\2\5\3\1\2\21\3\u0134\2\12\0"+
    "\6\2\336\3\42\2\65\3\13\2\336\3\2\2\u0182\3"+
    "\16\2\u0131\3\37\2\36\3\342\2\113\3\266\2\1\0"+
    "\36\2\140\0\200\2\360\0\20\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\5\3\1\14\1\15\3\0"+
    "\1\16\1\17\1\20\2\3\1\21\3\3\1\7\1\0"+
    "\1\7\1\22\2\3\1\23\2\3\1\24\1\3\1\25"+
    "\1\3\1\26\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[46];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\35\0\35\0\35\0\164"+
    "\0\35\0\221\0\35\0\256\0\313\0\350\0\u0105\0\u0122"+
    "\0\u013f\0\35\0\35\0\u015c\0\u0179\0\u0196\0\35\0\35"+
    "\0\35\0\u01b3\0\u01d0\0\127\0\u01ed\0\u020a\0\u0227\0\u0244"+
    "\0\u0261\0\u0261\0\35\0\u027e\0\u029b\0\127\0\u02b8\0\u02d5"+
    "\0\127\0\u02f2\0\127\0\u030f\0\127\0\127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[46];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\7"+
    "\2\2\1\10\1\11\1\12\1\13\1\14\2\4\1\15"+
    "\1\16\1\4\1\17\4\4\1\20\1\21\1\22\1\23"+
    "\36\0\1\3\33\0\1\4\2\0\1\4\6\0\1\4"+
    "\4\0\14\4\13\0\1\24\1\10\4\0\1\25\25\0"+
    "\1\26\4\0\1\27\1\30\33\0\1\31\17\0\1\4"+
    "\2\0\1\4\6\0\1\4\4\0\6\4\1\32\5\4"+
    "\2\0\1\4\2\0\1\4\6\0\1\4\4\0\6\4"+
    "\1\33\5\4\2\0\1\4\2\0\1\4\6\0\1\4"+
    "\4\0\3\4\1\34\3\4\1\35\4\4\2\0\1\4"+
    "\2\0\1\4\6\0\1\4\4\0\4\4\1\36\7\4"+
    "\2\0\1\4\2\0\1\4\6\0\1\4\4\0\4\4"+
    "\1\37\7\4\14\0\1\40\30\0\1\41\1\0\1\41"+
    "\1\0\1\42\32\0\1\43\24\0\1\4\2\0\1\4"+
    "\6\0\1\4\4\0\11\4\1\44\2\4\2\0\1\4"+
    "\2\0\1\4\6\0\1\4\4\0\10\4\1\45\3\4"+
    "\2\0\1\4\2\0\1\4\6\0\1\4\4\0\12\4"+
    "\1\46\1\4\2\0\1\4\2\0\1\4\6\0\1\4"+
    "\4\0\2\4\1\47\11\4\2\0\1\4\2\0\1\4"+
    "\6\0\1\4\4\0\5\4\1\50\6\4\14\0\1\40"+
    "\4\0\1\25\27\0\1\42\22\0\1\4\2\0\1\4"+
    "\6\0\1\4\4\0\2\4\1\51\11\4\2\0\1\4"+
    "\2\0\1\4\6\0\1\4\4\0\1\4\1\52\12\4"+
    "\2\0\1\4\2\0\1\4\6\0\1\4\4\0\7\4"+
    "\1\53\4\4\2\0\1\4\2\0\1\4\6\0\1\4"+
    "\4\0\6\4\1\54\5\4\2\0\1\4\2\0\1\4"+
    "\6\0\1\4\4\0\12\4\1\55\1\4\2\0\1\4"+
    "\2\0\1\4\6\0\1\4\4\0\2\4\1\56\11\4"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\1\1\1\11\1\1\1\11"+
    "\6\1\2\11\3\0\3\11\7\1\1\0\1\1\1\11"+
    "\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[46];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        /* Funzioni per la costruzione di symbols */
        private Symbol symbol(int type) {
          return new Symbol(type);
        }
        private Symbol symbol(int type, Object value) {
          return new Symbol(type, value);
        }

        /* Gestione della Symbol Table */
        HashMap<String, Symbol> symbolTable = new HashMap<>();

        private Symbol installID(String lessema) {
            if(symbolTable.containsKey(lessema))
                return symbolTable.get(lessema);
            else {
                Symbol symbol = symbol(Token.ID, lessema);
                symbolTable.put(lessema, symbol);
                return symbol;
            }
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Token.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <" + yytext() + ">" +
                            " at line " + yyline + ", column " + yycolumn);
            }
            // fall through
          case 24: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 25: break;
          case 3:
            { return installID(yytext());
            }
            // fall through
          case 26: break;
          case 4:
            { return symbol(Token.LPAR);
            }
            // fall through
          case 27: break;
          case 5:
            { return symbol(Token.RPAR);
            }
            // fall through
          case 28: break;
          case 6:
            { return symbol(Token.COMMA);
            }
            // fall through
          case 29: break;
          case 7:
            { return symbol(Token.NUMBER, yytext());
            }
            // fall through
          case 30: break;
          case 8:
            { return symbol(Token.SEMI);
            }
            // fall through
          case 31: break;
          case 9:
            { return symbol(Token.RELOP, "LT");
            }
            // fall through
          case 32: break;
          case 10:
            { return symbol(Token.RELOP, "EQ");
            }
            // fall through
          case 33: break;
          case 11:
            { return symbol(Token.RELOP, "GT");
            }
            // fall through
          case 34: break;
          case 12:
            { return symbol(Token.LBRACK);
            }
            // fall through
          case 35: break;
          case 13:
            { return symbol(Token.RBRACK);
            }
            // fall through
          case 36: break;
          case 14:
            { return symbol(Token.RELOP, "LE");
            }
            // fall through
          case 37: break;
          case 15:
            { return symbol(Token.RELOP, "NE");
            }
            // fall through
          case 38: break;
          case 16:
            { return symbol(Token.RELOP, "GE");
            }
            // fall through
          case 39: break;
          case 17:
            { return symbol(Token.IF);
            }
            // fall through
          case 40: break;
          case 18:
            { return symbol(Token.ASSIGN);
            }
            // fall through
          case 41: break;
          case 19:
            { return symbol(Token.INT);
            }
            // fall through
          case 42: break;
          case 20:
            { return symbol(Token.ELSE);
            }
            // fall through
          case 43: break;
          case 21:
            { return symbol(Token.THEN);
            }
            // fall through
          case 44: break;
          case 22:
            { return symbol(Token.FLOAT);
            }
            // fall through
          case 45: break;
          case 23:
            { return symbol(Token.WHILE);
            }
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
