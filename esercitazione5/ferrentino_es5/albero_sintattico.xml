<?xml version="1.0" encoding="UTF-8" standalone="no"?><ProgramOp type="notype"><VarDeclOpList><VarDeclOp type="string"><TypeOp type="string">string</TypeOp><IdAndExprList><IdAndExpr><Id type="string">HEY</Id><StringCons type="string">HEY</StringCons></IdAndExpr></IdAndExprList></VarDeclOp><VarDeclOp type="int"><TypeOp type="int">int</TypeOp><IdAndExprList><IdAndExpr><Id type="int">VOTO_COMPILATORI</Id><IntegerCons type="int">18</IntegerCons></IdAndExpr></IdAndExprList></VarDeclOp></VarDeclOpList><FunDeclOpList><FunDeclOp type="void"><isMain>true</isMain><Id type="void">mainFunction</Id><ParDeclOpList/><TypeOp type="void">void</TypeOp><BodyOp type="notype"><VarDeclOpList><VarDeclOp type="var"><TypeOp type="var">var</TypeOp><IdAndExprList><IdAndExpr><Id type="int">intero</Id><IntegerCons type="int">3</IntegerCons></IdAndExpr><IdAndExpr><Id type="real">reale</Id><RealCons type="real">3.3</RealCons></IdAndExpr><IdAndExpr><Id type="string">stringa</Id><StringCons type="string">hello</StringCons></IdAndExpr><IdAndExpr><Id type="bool">booleano</Id><TrueCons type="bool"/></IdAndExpr><IdAndExpr><Id type="char">carattere</Id><CharCons type="char">a</CharCons></IdAndExpr></IdAndExprList></VarDeclOp></VarDeclOpList><StatList><FunCallOpStat type="notype"><Id type="void">printVar</Id><ExprList><FunCallOpExpr type="int"><Id type="int">retIntFun</Id><ExprList><Id type="int">intero</Id></ExprList></FunCallOpExpr><Id type="real">reale</Id><Id type="string">stringa</Id><Id type="bool">booleano</Id><Id type="char">carattere</Id></ExprList></FunCallOpStat><FunCallOpStat type="notype"><Id type="void">modifyVar</Id><ExprList><Id type="int">intero</Id><Id type="real">reale</Id><Id type="string">stringa</Id><Id type="bool">booleano</Id><Id type="char">carattere</Id></ExprList></FunCallOpStat><FunCallOpStat type="notype"><Id type="void">printVar</Id><ExprList><Id type="int">intero</Id><Id type="real">reale</Id><Id type="string">stringa</Id><Id type="bool">booleano</Id><Id type="char">carattere</Id></ExprList></FunCallOpStat><ReadOp type="notype"><IdList><Id type="int">intero</Id><Id type="real">reale</Id><Id type="string">stringa</Id><Id type="bool">booleano</Id><Id type="char">carattere</Id></IdList><StringCons type="string">Inserisci (sottomettendo con INVIO ogni scelta) i valori per integer, real, string, boolean, char: 
</StringCons></ReadOp><FunCallOpStat type="notype"><Id type="void">printVar</Id><ExprList><Id type="int">intero</Id><Id type="real">reale</Id><Id type="string">stringa</Id><Id type="bool">booleano</Id><Id type="char">carattere</Id></ExprList></FunCallOpStat><IfOp type="notype"><TrueCons type="bool"/><BodyOp type="notype"><VarDeclOpList><VarDeclOp type="int"><TypeOp type="int">int</TypeOp><IdAndExprList><IdAndExpr><Id type="int">intero</Id><IntegerCons type="int">9999</IntegerCons></IdAndExpr></IdAndExprList></VarDeclOp></VarDeclOpList><StatList><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] La variabile "intero" fa shadowing</StringCons><StringCons type="string">
</StringCons><Id type="int">intero</Id></ExprList></WriteOp></StatList></BodyOp></IfOp><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo "intero" fuori dal blocco if-then</StringCons><StringCons type="string">
</StringCons><Id type="int">intero</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo la variabile globale "HEY" </StringCons><StringCons type="string">
</StringCons><Id type="string">HEY</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo la variabile globale "VOTO_COMPILATORI" </StringCons><StringCons type="string">
</StringCons><Id type="int">VOTO_COMPILATORI</Id></ExprList></WriteOp><FunCallOpStat type="notype"><Id type="void">useVarBeforeDecl</Id><ExprList/></FunCallOpStat><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo -1--1 = </StringCons><DiffOp type="int"><UminusOp type="int"><IntegerCons type="int">1</IntegerCons></UminusOp><UminusOp type="int"><IntegerCons type="int">1</IntegerCons></UminusOp></DiffOp></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo le escape sequence</StringCons></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">
	&#13;"\</StringCons></ExprList></WriteOp><FunCallOpStat type="notype"><Id type="int">retIntFun</Id><ExprList><Id type="int">intero</Id></ExprList></FunCallOpStat><ReturnOp type="notype"/></StatList></BodyOp></FunDeclOp><FunDeclOp type="void"><isMain>false</isMain><Id type="void">printVar</Id><ParDeclOpList><ParDeclOp type="int"><isOut>false</isOut><TypeOp type="int">int</TypeOp><IdList><Id type="int">intero</Id></IdList></ParDeclOp><ParDeclOp type="real"><isOut>false</isOut><TypeOp type="real">real</TypeOp><IdList><Id type="real">reale</Id></IdList></ParDeclOp><ParDeclOp type="string"><isOut>false</isOut><TypeOp type="string">string</TypeOp><IdList><Id type="string">stringa</Id></IdList></ParDeclOp><ParDeclOp type="bool"><isOut>false</isOut><TypeOp type="bool">bool</TypeOp><IdList><Id type="bool">booleano</Id></IdList></ParDeclOp><ParDeclOp type="char"><isOut>false</isOut><TypeOp type="char">char</TypeOp><IdList><Id type="char">carattere</Id></IdList></ParDeclOp></ParDeclOpList><TypeOp type="void">void</TypeOp><BodyOp type="notype"><VarDeclOpList/><StatList><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampa delle variabili</StringCons></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><Id type="int">intero</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><Id type="real">reale</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><Id type="string">stringa</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><Id type="bool">booleano</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><Id type="char">carattere</Id></ExprList></WriteOp></StatList></BodyOp></FunDeclOp><FunDeclOp type="void"><isMain>false</isMain><Id type="void">modifyVar</Id><ParDeclOpList><ParDeclOp type="int"><isOut>true</isOut><TypeOp type="int">int</TypeOp><IdList><Id type="int">intero</Id></IdList></ParDeclOp><ParDeclOp type="real"><isOut>true</isOut><TypeOp type="real">real</TypeOp><IdList><Id type="real">reale</Id></IdList></ParDeclOp><ParDeclOp type="string"><isOut>true</isOut><TypeOp type="string">string</TypeOp><IdList><Id type="string">stringa</Id></IdList></ParDeclOp><ParDeclOp type="bool"><isOut>true</isOut><TypeOp type="bool">bool</TypeOp><IdList><Id type="bool">booleano</Id></IdList></ParDeclOp><ParDeclOp type="char"><isOut>true</isOut><TypeOp type="char">char</TypeOp><IdList><Id type="char">carattere</Id></IdList></ParDeclOp></ParDeclOpList><TypeOp type="void">void</TypeOp><BodyOp type="notype"><VarDeclOpList/><StatList><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Modifica delle variabili</StringCons></ExprList></WriteOp><AssignOp type="notype"><IdList><Id type="int">intero</Id></IdList><ExprList><AddOp type="int"><Id type="int">intero</Id><IntegerCons type="int">1</IntegerCons></AddOp></ExprList></AssignOp><AssignOp type="notype"><IdList><Id type="real">reale</Id></IdList><ExprList><AddOp type="real"><Id type="real">reale</Id><IntegerCons type="int">1</IntegerCons></AddOp></ExprList></AssignOp><AssignOp type="notype"><IdList><Id type="string">stringa</Id></IdList><ExprList><StrCatOp type="string"><Id type="string">stringa</Id><StringCons type="string">hello</StringCons></StrCatOp></ExprList></AssignOp><AssignOp type="notype"><IdList><Id type="bool">booleano</Id></IdList><ExprList><NotOp type="bool"><Id type="bool">booleano</Id></NotOp></ExprList></AssignOp><AssignOp type="notype"><IdList><Id type="char">carattere</Id></IdList><ExprList><CharCons type="char">b</CharCons></ExprList></AssignOp></StatList></BodyOp></FunDeclOp><FunDeclOp type="void"><isMain>false</isMain><Id type="void">useVarBeforeDecl</Id><ParDeclOpList/><TypeOp type="void">void</TypeOp><BodyOp type="notype"><VarDeclOpList><VarDeclOp type="int"><TypeOp type="int">int</TypeOp><IdAndExprList><IdAndExpr><Id type="int">a</Id><Id type="int">b</Id></IdAndExpr></IdAndExprList></VarDeclOp><VarDeclOp type="int"><TypeOp type="int">int</TypeOp><IdAndExprList><IdAndExpr><Id type="int">b</Id><IntegerCons type="int">2</IntegerCons></IdAndExpr></IdAndExprList></VarDeclOp></VarDeclOpList><StatList><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo "a", dichiarata prima di "b"</StringCons><StringCons type="string">
</StringCons><Id type="int">a</Id></ExprList></WriteOp><WriteOp type="notype"><isLn>true</isLn><ExprList><StringCons type="string">[i] Stampo "b", dichiarata dopo "a"</StringCons><StringCons type="string">
</StringCons><Id type="int">b</Id></ExprList></WriteOp></StatList></BodyOp></FunDeclOp><FunDeclOp type="int"><isMain>false</isMain><Id type="int">retIntFun</Id><ParDeclOpList><ParDeclOp type="int"><isOut>true</isOut><TypeOp type="int">int</TypeOp><IdList><Id type="int">a</Id></IdList></ParDeclOp></ParDeclOpList><TypeOp type="int">int</TypeOp><BodyOp type="notype"><VarDeclOpList/><StatList><AssignOp type="notype"><IdList><Id type="int">a</Id></IdList><ExprList><Id type="int">a</Id></ExprList></AssignOp><ReturnOp type="notype"><Id type="int">a</Id></ReturnOp></StatList></BodyOp></FunDeclOp></FunDeclOpList></ProgramOp>